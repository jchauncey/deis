(include 'config/')
(require [deis.nginx :as nginx])

(logging/init)
(info "loading" *config-file*)

(tcp-server :host "0.0.0.0"   :port 5555)
(udp-server :host "0.0.0.0"   :port 5556)

; Expire old events from the index every 5 seconds.
(periodically-expire 5) 

(def librato (librato-metrics "jchauncey@engineyard.com" "7288e69e8e627852eec6fc3c341936e8d445a8963d1fa0cf789433a4c707bb98"))


(let [index (index)]
  (streams
    (default :ttl 60
        ; Index all events immediately.
        index
        
        ; Log expired events.
        ; (expired (fn [event] (info "expired" event)))

        ; print all deis events
        ; (where (and (service #"^deis-.*") (not (service #"deis-riemann"))) prn)
        
        ; annotate based on controller events
        ; (where (and (service "deis-controller") (not (state "expired"))) (librato :start-annotation))
         
        ; create nginx metrics from the parsed log output
        (where (and (service "deis-router") (not (state "expired"))) nginx/create-nginx-metrics)
        
        ; calculate nginx request rate
        (where (and (service #".+-request$") (not (state "expired"))) (adjust [:service str "-rate"] (rate 1 reinject)))
        
        ;calculate the percentiles for each repsonse code type
        (where (and (service #".+-response-time$") (not (state "expired"))) (percentiles 15 [0.5 0.95 0.99] reinject))    
        
        (where (and (service #".*-response.*") (not (state "expired"))) prn)
        (where (and (service #".*-request.*") (not (state "expired"))) prn)
      
        ;(where (and (service #".*-response.*") (not (state "expired"))) (librato :gauge))
        ;(where (and (service #".*-request-rate.*") (not (state "expired"))) (librato :gauge)))))
